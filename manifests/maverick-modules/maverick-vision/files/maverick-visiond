#!/usr/bin/python

import sys, os, time, logging, errno, re, ConfigParser
import v4l2
from fcntl import ioctl
import gi
from importlib import import_module
import lockfile, signal, grp
from daemon import runner

gi.require_version('Gst', '1.0')
#from gi.repository import GObject,GLib,Gst,GstRtspServer
from gi.repository import GObject,GLib,Gst
GObject.threads_init()
Gst.init(None)

### Streamer Class to build up Gstreamer pipeline from in to out
class Streamer(object):
        def __init__(self,width,height,framerate,format,input,source,output,dest,port):
            self.size = 0
            self.playing = False
            self.paused = False
            
            # Start with creating a pipeline from source element
            if input == "appsrc":
                self.input_appsrc()
            elif input == "v4l2":
                self.input_v4l2(source)
            
            # Next deal with each format separately and interpret the stream and encoding method to the pipeline
            if format == "h264":
                self.capstring = 'video/x-h264,width='+str(width)+',height='+str(height)+',framerate='+str(framerate)+'/1'
                self.stream_h264()
            elif format == "mjpeg":
                self.capstring = 'image/jpeg,width='+str(width)+',height='+str(height)+',framerate='+str(framerate)+'/1'
                self.stream_mjpeg()
                self.encode_h264()
            
            # Finally connect the requested output to the end of the pipeline
            if output == "file":
                self.output_file(dest)
            elif output == "udp":
                self.output_udp(dest, port)
            elif output == "dynudp":
                self.output_dynudp()
            elif output == "rtsp":
                self.output_rtsp()
                
            self.bus()
            self.start() # need to self start the object for PiCamera method

        ### Input methods
        def input_appsrc(self):
            logger.info("Attaching input 'appsrc'")
            self.pipeline = Gst.Pipeline.new()
            self.source = Gst.ElementFactory.make("appsrc", "source")
            self.pipeline.add(self.source)
            # Set appsrc stream to live
            self.source.set_property("is-live",True)
            # Let appsrc set the timestamp so we don't have to do it
            self.source.set_property("do-timestamp",True)
            self.source.set_property("min-latency",0)
        
        def input_v4l2(self, source):
            logger.info("Attaching input 'v4l2'")
            if not source:
                source = "/dev/video0"
            self.pipeline = Gst.Pipeline.new()
            self.source = Gst.ElementFactory.make("v4l2src", "v4l2-source")
            self.pipeline.add(self.source)
            self.source.set_property("device", source)

        ### Stream methods
        def stream_h264(self):
            logger.info("Attaching stream 'h264'")
            capsfilter = Gst.ElementFactory.make("capsfilter", "capsfilter")
            capsfilter.set_property('caps', Gst.Caps.from_string(self.capstring))
            self.pipeline.add(capsfilter)
            self.source.link(capsfilter)
            parse = Gst.ElementFactory.make("h264parse", "h264parse")
            if parse:
                self.pipeline.add(parse)
                capsfilter.link(parse)
            h264pay = Gst.ElementFactory.make("rtph264pay", "h264-payload")
            h264pay.set_property("config-interval", 1)
            h264pay.set_property("pt", 96)
            h264pay.set_property("name", "pay0") # Set pay%d for rtsp stream pickup
            self.pipeline.add(h264pay)
            if parse:
                logger.debug('Attaching h264pay to h264parse')
                parse.link(h264pay)
            else:
                logger.debug('Attaching h264pay direct to capsfilter')
                capsfilter.link(h264pay)
            self.source_attach = h264pay
            self.encode_attach = self.source_attach # fake encode_attach as we don't need to encode, we already have encoded stream
            
        def stream_mjpeg(self):
            logger.info("Attaching stream 'mjpeg'")
            capsfilter = Gst.ElementFactory.make("capsfilter", "capsfilter")
            capsfilter.set_property('caps', Gst.Caps.from_string(self.capstring))
            self.pipeline.add(capsfilter)
            self.source.link(capsfilter)
            parse = Gst.ElementFactory.make("jpegparse", "jpegparse")
            if parse:
                self.pipeline.add(parse)
                capsfilter.link(parse)
            dec = Gst.ElementFactory.make("jpegdec", "jpegdec")
            self.pipeline.add(dec)
            if parse:
                parse.link(dec)
            else:
                capsfilter.link(dec)
            queue = Gst.ElementFactory.make("queue", "queue")
            self.pipeline.add(queue)
            dec.link(queue)
            vconvert = Gst.ElementFactory.make("videoconvert", "videoconvert")
            self.pipeline.add(vconvert)
            queue.link(vconvert)
            self.source_attach = vconvert

        ### Encoding methods
        def encode_h264(self):
            logger.info("Attaching encoding 'h264'")
            if Gst.ElementFactory.find("omxh264enc"):
                logger.info("Raspberry hardware encoder detected, using omxh264enc as h264 encoder")
                self.h264enc = Gst.ElementFactory.make("omxh264enc", "raspberry-h264-encode")
            else:
                logger.info("No hardware encoder detected, using software x264 encoder")
                self.h264enc = Gst.ElementFactory.make("x264enc", "x264-encode")
                self.h264enc.set_property('speed-preset', 1)
                self.h264enc.set_property('tune', 0x00000004)
            self.pipeline.add(self.h264enc)
            self.source_attach.link(self.h264enc)
            parse = Gst.ElementFactory.make("h264parse", "h264parse")
            if parse:
                self.pipeline.add(parse)
                self.h264enc.link(parse)
            h264pay = Gst.ElementFactory.make("rtph264pay", "h264-payload")
            h264pay.set_property("config-interval", 1)
            h264pay.set_property("pt", 96)
            h264pay.set_property("name", "pay0") # Set pay%d for rtsp stream pickup
            self.pipeline.add(h264pay)
            if parse:
                logger.debug('Attaching h264pay to h264parse')               
                parse.link(h264pay)
            else:
                logger.debug('Attaching h264pay direct to h264 encoder')
                self.h264enc.link(h264pay)
            self.encode_attach = h264pay

        ### Output methods
        def output_file(self, dest):
            logger.info("Attaching output 'file'")
            mux = Gst.ElementFactory.make("mpegtsmux", "mux")
            self.pipeline.add(mux)
            self.encode_attach.link(mux)
            
            sink = Gst.ElementFactory.make("filesink", "sink")
            sink.set_property("location", dest)
            self.pipeline.add(sink)
            mux.link(sink)
        
        def output_udp(self, dest, port):
            if not dest:
                logger.warn("UDP destination must be set")
                return
            logger.info("Attaching output 'udp'")
            sink = Gst.ElementFactory.make("udpsink", "udpsink")
            sink.set_property("host", dest)
            sink.set_property("port", port)
            sink.set_property("sync", False)
            self.pipeline.add(sink)
            self.encode_attach.link(sink)
        
        def output_dynudp(self):
            logger.info("Attaching output 'dynudp'")
            sink = Gst.ElementFactory.make("dynudpsink", "dynudpsink")
            sink.set_property("sync", False)
            sink.set_property("bind-address", "0.0.0.0")
            sink.set_property("bind-port", 5554)
            self.pipeline.add(sink)
            self.encode_attach.link(sink)

        def output_rtsp(self):
            ### THIS DOES NOT WORK YET ###
            logger.info("Attaching output 'rtsp'")
            server = GstRtspServer.RTSPServer()
            server.set_service('5554')
            server.set_address('0.0.0.0')

            #factory = GstRtspServer.RTSPMediaFactory()
            #factory.set_launch("( rpicamsrc name=src bitrate=0 quantisation-parameter=24 intra-refresh-type=cyclic metering-mode=matrix annotation-mode=13 preview=false  ! video/x-h264,profile=high,width=640,height=480,framerate=30/1 ! h264parse ! rtph264pay pt=96 name=pay0 )")
            #factory.set_shared(True)
            #factory.connect("media-configure", on_media_configure)

            media = GstRtspServer.RTSPMedia()
            media.take_pipeline(self.pipeline) # Attach the constructed pipeline to the new instance
            media.create_stream(media, )
            media.prepare()
            logger.debug("rtsp status:" + str(media.get_status()))

            #server.get_mount_points().add_factory("/stream", media)
            server.attach(None)
            logger.info("RTSP stream running at rtsp://<hostname>:5554/stream")
    
        ### Misc methods (glib introspection)
        def on_message(self, bus, message):
            t = message.type
            if t == Gst.MessageType.EOS:
                self.pipeline.set_state(Gst.State.NULL)
                self.playing = False
            elif t == Gst.MessageType.ERROR:
                self.pipeline.set_state(Gst.State.NULL)
                err, debug = message.parse_error()
                print "Error: %s" % err, debug
                self.playing = False

        def bus(self):
            bus = self.pipeline.get_bus()
            bus.add_signal_watch()
            bus.connect("message", self.on_message)

        ### Action methods
        def start(self):
            self.pipeline.set_state(Gst.State.PLAYING)
            self.playing = True
            logger.info('Starting camera stream')

        def write(self,s):
            gstbuff = Gst.Buffer.new_wrapped(s)
            self.source.emit("push-buffer",gstbuff)

        def stop(self):
            self.pipeline.set_state(Gst.State.READY)
            self.playing = False
            logger.info('Stopping camera stream')

        def flush(self):
            self.stop()


### Main App Class (initial concept)
class App():
    def __init__(self):
        self.stdin_path = '/dev/null'
        self.stdout_path = '/srv/maverick/data/logs/maverick-visiond.log'
        self.stderr_path = '/srv/maverick/data/logs/maverick-visiond.log'
        self.pidfile_path = '/srv/maverick/data/run/maverick-visiond.pid'
        self.pidfile_timeout = 5

    def run(self):
        logger.info("Starting maverick-visiond")

        # Get config
        self.config = self.config_parse("/srv/maverick/data/config/maverick-visiond.conf")

        # Check the camera has a valid input
        try:
            self.vd = open(self.config['camera'], 'rw') 
        except:
            logger.critical('Camera not specified in config, or camera not valid')
            sys.exit(1)
        if not self.check_input():
            logger.critical('Specified camera not valid')
            sys.exit(1)

        # Log info
        self.camera_info()
        
        # Autodetect if we have h264 available from the camera, if so setup a passthrough pipeline.
        streamtype = None
        if self.check_h264():
            logger.info('Camera h264 stream available, using h264 passthrough')
            streamtype = 'h264'
        # Otherwise, setup an mjpg->h264 encoder pipeline.
        else:
            logger.info('Camera h264 stream not available, using mjpeg -> h264 encoder')
            streamtype = 'mjpeg'
        try:
            Streamer(self.config['width'], self.config['height'], self.config['framerate'], streamtype, self.config['input'], self.config['camera'], self.config['output'], self.config['output_dest'], int(self.config['output_port']))
        except:
            logger.critical('Error creating '+streamtype+' stream')
            sys.exit(1)

        while True:
            time.sleep(5)

    def config_parse(self, path):
        Config = ConfigParser.SafeConfigParser()
        options = {}
        try:
            Config.read(path)
            for item in Config.options("visiond"):
                options[item] = Config.get("visiond", item)
            logger.info("Config read from " + str(path))
        except:
            logger.critical("Error reading config file: " + str(path))
            sys.exit(1)
        return options
        
    def camera_info(self):
        # Log capability info
        cp = v4l2.v4l2_capability() 
        ioctl(self.vd, v4l2.VIDIOC_QUERYCAP, cp) 
        logger.debug("driver:"+cp.driver)
        logger.debug("card:"+cp.card)
        
        # Log controls available
        queryctrl = v4l2.v4l2_queryctrl(v4l2.V4L2_CID_BASE)
        while queryctrl.id < v4l2.V4L2_CID_LASTP1:
            try:
                ioctl(self.vd, v4l2.VIDIOC_QUERYCTRL, queryctrl)
            except IOError, e:
                # this predefined control is not supported by this device
                assert e.errno == errno.EINVAL
                queryctrl.id += 1
                continue
            logger.debug("Camera control: "+queryctrl.name)
            queryctrl = v4l2.v4l2_queryctrl(queryctrl.id + 1)
        queryctrl.id = v4l2.V4L2_CID_PRIVATE_BASE
        while True:
            try:
                ioctl(self.vd, v4l2.VIDIOC_QUERYCTRL, queryctrl)
            except IOError, e:
                # no more custom controls available on this device
                assert e.errno == errno.EINVAL
                break
            logger.debug("Camera control: "+queryctrl.name)
            queryctrl = v4l2.v4l2_queryctrl(queryctrl.id + 1)

    def check_input(self):
        input = v4l2.v4l2_input(0)
        try:
            ioctl(self.vd, v4l2.VIDIOC_ENUMINPUT, input)
            logger.debug('Camera input: '+input.name+':'+str(input.type))
            if input.type != 2:
                return False # If input type is not camera (2) then return false
            return True
        except:
            return False

    def check_h264(self):
        capture = v4l2.v4l2_fmtdesc()
        capture.index = 0
        capture.type = v4l2.V4L2_BUF_TYPE_VIDEO_CAPTURE
        h264 = False
        try:
            while (ioctl(self.vd, v4l2.VIDIOC_ENUM_FMT, capture) >= 0):
                logger.debug("Camera format: "+capture.description)
                capture.index += 1
                if re.search('H.264', capture.description):
                    h264 = True
        except:
            pass
        return h264

 
if __name__ == "__main__":
    print "Starting maverick-visiond daemon"

    # Setup logging
    logger = logging.getLogger("DaemonLog")
    logger.setLevel(logging.DEBUG)
    formatter = logging.Formatter("%(asctime)s - %(name)s - %(levelname)s - %(message)s")
    handler = logging.FileHandler("/srv/maverick/data/logs/maverick-visiond.log")
    handler.setFormatter(formatter)
    logger.addHandler(handler)
    
    # Create app instance and daemonize
    app = App()
    daemon_runner = runner.DaemonRunner(app)
    daemon_runner.daemon_context.files_preserve=[handler.stream]
    daemon_runner.do_action()
    
    logger.info("Stopping maverick-visiond")
    print "Stopped maverick-visiond daemon"
