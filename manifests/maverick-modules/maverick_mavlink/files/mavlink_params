#!/usr/bin/env python
# -*- coding: utf-8 -*-

# mavlink_sitlparams
# https://github.com/fnoop/maverick/manifests/maverick-modules/maverick_mavlink/files
#
# This is an experimental script to connect to arducopter using dronekit, to control parameter setup.

from dronekit import connect, VehicleMode, LocationGlobal, LocationGlobalRelative
from pymavlink import mavutil
from os import path
from time import sleep, time
from datetime import datetime
import signal
import json

# Find full directory path of this script, used for loading config and other files
cwd = path.dirname(path.abspath(__file__))

# Find current time, used for dating files
now = datetime.now()
nowtime = now.strftime("%Y-%m-%d-%H-%M-%S")

# Configure argument parsing
import argparse
import ConfigParser
parser = argparse.ArgumentParser(description='Mavlink Parameter Configurator')
parser.add_argument('--config', '-c', required=True, help="config file location, defaults to same directory as mavlink_params")
parser.add_argument('--verbose', '-v', action='store_true', help="Verbose/Debug output")
args = parser.parse_args()

# Define craft class
class Craft:
    def __init__(self, configpath):
        self.debug = False
        self.mode = None
        self.connected = None
        self.vehicle = None
        self.configpath = configpath
        self.readconf()
        self.connect()
    def connect(self):
        try:
            print "Connecting to drone on: %s" % self.config["connect"]
            self.vehicle = connect(self.config["connect"], wait_ready=True, rate=1)
            self.connected = True
            print "Success: Connected to drone"
        except:
            self.connected = False
            print "Warning: Could not connect to drone"
    def readconf(self):
        try:
            with open(self.configpath) as jsonfile:    
                data = json.load(jsonfile)
                self.config = data['config']
                self.params = data['params']
        except Exception as error:
            print "Error reading config file:", str(error)
    def updateparams(self):
        for param,value in self.params.items():
            if craft.vehicle.parameters[str(param)] != value:
                print "Changing parameter '"+str(param)+"' to",value
                craft.vehicle.parameters[str(param)] = value

# Define class for signal tracking and handling
class SigTrack:
    def __init__(self):
        self.counter = 0
    def add(self):
        self.counter += 1
    def count(self):
        return self.counter
    def handle_sig(self, signal, frame):
        print "Signal handler called, calling shutdown and cleanup logic"
        sigtracker.add()
        if sigtracker.count() >= 3:
            print "Signal handler called three times, exiting immediately"
            exit(1)
            
            
# Setup signal handlers
sigtracker = SigTrack()
signal.signal(signal.SIGINT, sigtracker.handle_sig)
signal.signal(signal.SIGTERM, sigtracker.handle_sig)

# Create craft object
craft = Craft(args.config)

### --------------------------------
### Main Loop
### Reread config and then make sure params match
### Then go sleepy bye bye for a bit
### --------------------------------
print "Entering main tracking loop"
while sigtracker.count() == 0:
    if not craft.connected:
        craft.connect()
    else:
        craft.readconf()
        craft.updateparams()
    sleep(10)
    
print "mavlink_params shutdown complete, exiting"
exit(0)