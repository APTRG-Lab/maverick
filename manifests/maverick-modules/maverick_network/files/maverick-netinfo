#!/usr/bin/python

import os, sys, re, subprocess
import netifaces
import pyric             # pyric errors
import pyric.pyw as pyw  # iw functionality

# Insert facts directory into module path.  Not very clean, but they have to live there for puppet, so for reuse sake we import it here
sys.dont_write_bytecode = True # This is to prevent .pyc files in facts.d directory
sys.path.insert(0, '/srv/maverick/software/maverick/manifests/maverick-modules/maverick_network/facts.d')
sys.path.insert(0, '/srv/maverick/software/maverick/manifests/maverick-modules/maverick_baremetal/facts.d')
sys.path.insert(0, '/usr/local/examples')
from udevnet import Udevnet
udevnet = Udevnet()
udevnet.runall()

from netinfo import Netinfo # from facts.d/netinfo.py
#import iwconfig

import argparse
parser = argparse.ArgumentParser(description='Display network information')
#parser.add_argument('-m', '--motd', help="Display information in format more suitable to create motd", action="store_true")
args = parser.parse_args()

ctrls = {}
ctrls['reset'] = '[0m'
ctrls['bold'] = '[1m'
ctrls['bg_black'] = '[40m'
ctrls['bg_red'] = '[41m'
ctrls['bg_blue'] = '[44m'
ctrls['bg_purple'] = '[45m'
ctrls['fg_black'] = '[30m'
ctrls['fg_red'] = '[31m'
ctrls['fg_grey'] = '[37m'

def twocols(col1, col2):
    return ctrls['fg_grey']+ col1+':' +ctrls['reset']+ctrls['bold']+ col2 +ctrls['reset']

ifs = sorted(netifaces.interfaces())
udevnet = Udevnet()
udevnet.runall()
for _if in ifs:
    if _if == "lo" or re.search('^sit', _if) or re.search('^ip6tnl', _if):
        continue
    _netinfo = Netinfo(_if)
    _netinfo.getinfo()
    print ctrls['bg_black']+ctrls['bold']+"Interface:", str(_if), ctrls['reset']
    print twocols("Type", '\t\t\t'+str(_netinfo.data['type']))
    print twocols("MAC Address", '\t\t'+str(_netinfo.data['macaddress']))
    print twocols("Vendor", '\t\t\t'+str(_netinfo.data['vendor'])+" : "+str(_netinfo.data['vendorstr'])+" : "+str(_netinfo.data['vendoroui']))
    print twocols("Model", '\t\t\t'+str(_netinfo.data['modelstr'])+" : "+str(_netinfo.data['model']))
    print twocols("Driver", '\t\t\t'+str(_netinfo.data['driver']))
    print twocols("IP Address", '\t\t'+str(_netinfo.data['ipaddress']))
    print twocols("Predictable Name", '\t'+str(_netinfo.data['netname']))
    try:
        print twocols("Wireless Chipset", '\t'+str(_netinfo.data['chipset']))
        print twocols("Wireless Standards", '\t'+str(",".join(_netinfo.data['standards'])))
        print twocols("Wireless Modes", '\t\t'+str(",".join(_netinfo.data['modes'])))
        try:
            if _netinfo.data['bands']['5GHz']:
                print twocols("Wireless Bands", '\t\t'+'Dual Band - 2.4Ghz & 5Ghz')
        except:
            print twocols("Wireless Bands", '\t\t'+'Single Band - 2.4Ghz')
        #print twocols("Wireless Channels", '\t'+str(_netinfo.data['chans']))
        #print twocols("Wireless Frequencies", '\t'+str(_netinfo.data['freqs']))

        if _netinfo.data['mode'].lower() == "managed":
            print twocols("Wireless Mode", '\t\t'+ctrls['bg_blue']+str(_netinfo.data['mode'].capitalize()+ctrls['reset']))
        elif _netinfo.data['mode'].lower() == "monitor":
            print twocols("Wireless Mode", '\t\t'+ctrls['bg_purple']+str(_netinfo.data['mode'].capitalize()+ctrls['reset']))
        elif _netinfo.data['mode'].lower() == "ap":
            print twocols("Wireless Mode", '\t\t'+ctrls['bg_red']+"Access Point"+ctrls['reset'])

        print twocols("Wireless SSID", '\t\t'+str(_netinfo.data['ssid']))
        try:
            print twocols("Wireless State", '\t\t'+str(_netinfo.data['state'].capitalize()))
        except:
            pass
        try:
            print twocols("Wireless Frequency", '\t'+str(float(_netinfo.data['frequency'])/1000) +' Ghz')
        except:
            pass
        print twocols("Wireless Chanwidth", '\t'+str(_netinfo.data['chw']))
        print twocols("Wireless RSS", '\t\t'+str(_netinfo.data['rss']))
        
        try:
            print twocols("Wireless TX Rate", '\t'+str(_netinfo.data['wtx']['bitrate']['rate'])+' Mbps')
        except:
            pass
        
    except:
        pass
    print

gateways = netifaces.gateways()
defaultgw = gateways['default'][netifaces.AF_INET][0]
print twocols(ctrls['bold']+"Default Gateway"+ctrls['reset'], '\t'+defaultgw)
